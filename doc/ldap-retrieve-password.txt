
:::NOTE::::
	SHA-1 is not a secure hash and should not be used for anything.
	SMD5 (SSHA) only have one round unlike the crypt versions
	ie {SSHA} is not the same as (retired) BSD $sha1$ 
	and {SMD5} is not the same as $1$..

Passing the hash off to crypt(3) has the advantage it can also
be used in a normal passwd file or even a nis map.

Usage in order of decreasing strength:

	slappasswd -h '{CRYPT}' -c '$6$%s' -s 'a secret'  # For SHA512
	slappasswd -h '{CRYPT}' -c '$5$%s' -s 'a secret'  # For SHA256
	slappasswd -h '{CRYPT}' -c '$1$%s' -s 'a secret'  # For MD5

-----------------------------------------------------------------


:::Retrieving UserPasswords from LDAP

ORG="dc=example,dc=xor,dc=com"
BINDDN="Directory Manager"
LDAPSECRET="secret"

LDAPSEARCH=/bin/ldapsearch
NOWRAP="-o ldif-wrap=no"

Lookup user kpopper retrieving uid and password:
----
$LDAPSEARCH $NOWRAP -D "cn=$BINDDN" -x -w "$LDAPSECRET" -b "uid=kpopper,ou=People,$ORG" uid userPassword
----
Gives the userPassword base64 encoded:
----
# kpopper, People, $ORG
dn: uid=kpopper,ou=People,$ORG
uid: kpopper
userPassword:: e0NSWVBUfSQ2JFZjZlB2dXQ4MnpwaXYzaEwkblBLUG9sdnp4cGFJUDRkMVNxUy9xNldxcE90VFZpU0d6L2ZwVDlkLzFjU1lNRFEwd2FTRkhxREFZWVluVkhmcEoyd1Mxd1dKSXdCbzhUdUdoWDJqbTA=
----
Which when decoded 
----
./b64_decode 'e0NSWVBUfSQ2JFZjZlB2dXQ4MnpwaXYzaEwkblBLUG9sdnp4cGFJUDRkMVNxUy9xNldxcE90VFZpU0d6L2ZwVDlkLzFjU1lNRFEwd2FTRkhxREFZWVluVkhmcEoyd1Mxd1dKSXdCbzhUdUdoWDJqbTA='
----
Gives a SHA512 ($6$) crypt(3) hashed password
----
{CRYPT}$6$VcfPvut82zpiv3hL$nPKPolvzxpaIP4d1SqS/q6WqpOtTViSGz/fpT9d/1cSYMDQ0waSFHqDAYYYnVHfpJ2wS1wWJIwBo8TuGhX2jm0
----

In another case the base64 encoded password hash is
---- 
e1NTSEF9VDhvcXBjeTJWSXhYTzBVVnVkREZhd3Nka2VvMmdVQVY=
----
which when decoded gives
----
	{SSHA}T8oqpcy2VIxXO0UVudDFawsdkeo2gUAV
----

Note: '{SSHA}' is the default hash from slappasswd
eg
----
	slappasswd -s 'an example'
----
	{SSHA}zAtvDWx5TxH9U/HTw7x4HZSSzA48gjK9
----

This is a Salted SHA-1 (SSHA) password hash and would be
explicitly created with the '-h' switch
viz
	slappasswd -h '{SSHA}' -s 'an example'

The unsalted SHA-1 (SHA) in created with 
	slappasswd -h '{SHA}' -s 'an example'
----
	{SHA}phnyIm3St31XRSWw+fnx3vL25Os=
----

The salted hash (SSHA) formed by:
	1. taking the clear text password
	2. appending 4 bytes of salt (these can be any value 0..255 ie binary)
	3. applying the SHA-1 hash function which produces 20 bytes.
	4. appending the 4 bytes of salt giving 24 bytes
	5. encoding using standard base64 which gives 32 bytes (8/6 * 24)
	6. prepending the string '{SSHA}'
	7. stored in the LDAP directory base64 encoded again.

----
Reversing the process we can recover the seed.
Assuming we have reversed '7.'
----
	./ssha_info '{SSHA}zAtvDWx5TxH9U/HTw7x4HZSSzA48gjK9'
----
Prints the hex representation of the hashed password and seed
----
	SHA-PWDHASH:  cc0b6f0d6c794f11fd53f1d3c3bc781d9492cc0e
	SHA-PWDSALT:  3c8232bd
----

We can check this using the SHA1 function directly
----
	./ssha_mkpass -x 3c8232bd -k 'an example'
----
As expected
	{SSHA}zAtvDWx5TxH9U/HTw7x4HZSSzA48gjK9

----
slappasswd also has a native MD5 {MD5} and salted MD5 {SMD5} 

The {SMD5} and {MD5} works exactly the same way with SHA1 hash replaced
with MD5 which produces a 16 byte hash instead 20 bytes that SHA1 produces
but still appends 4 bytes of salt.
eg
	slappasswd -h '{SMD5}' -s 'an example'
----
	{SMD5}vrAJQWiOeBJpu8W9QBvze5Wi36o=
----

	./smd5_info	'{SMD5}vrAJQWiOeBJpu8W9QBvze5Wi36o='
----
	SMD5-PWDHASH:  beb00941688e781269bbc5bd401bf37b95a2dfaa
	SMD5-PWDSALT:  95a2dfaa
----

	./smd5_mkpass	-x '95a2dfaa' -k 'an example'
----
	{SMD5}vrAJQWiOeBJpu8W9QBvze5Wi36o=
----

:::CODE:::
SHA1 - sha1.[ch] - Steve Reid <steve@edmweb.com> "100% Public Domain"
MD5  - md5.[ch]  - L Peter Deutsch <ghost@aladdin.com> Fair dealing.

